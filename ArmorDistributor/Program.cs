using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Noggog;
using System.IO;
using ArmorDistributor.Utils;
using log4net.Config;
using log4net;
using System.Reflection;
using ArmorDistributor.Managers;
using System;
using ArmorDistributor.Config;
using Mutagen.Bethesda.Environments;
using Mutagen.Bethesda.Plugins.Cache;

namespace ArmorDistributor
{
    class Program
    {
        private static readonly ILog Logger = LogManager.GetLogger(typeof(Program));
        internal static IGameEnvironmentState<ISkyrimMod, ISkyrimModGetter> PatcherEnv = GameEnvironment.Typical.Skyrim(
                SkyrimRelease.SkyrimSE, LinkCachePreferences.Default);

        internal static Settings? Settings = null;
        static Lazy<Settings> LazySettings = null!;

        public static async Task<int> Main(string[] args)
        {
            // Init logger
            var logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());
            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings(nickname: "Settings",
                    path: "settings.json", out LazySettings, true)
                .SetTypicalOpen(GameRelease.SkyrimSE, "ADP - Delete Me.esp")
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPacher)
                .Run(args);
        }

        private static void RunPacher(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Settings = LazySettings.Value;
            Settings.Init(state);
            PatcherEnv.Dispose();
            Logger.InfoFormat("Settings loaded...");
            Logger.InfoFormat("************ Starting Patcher ************");

            //foreach(var o in state.LoadOrder.PriorityOrder
            //    .Where(x=>x.ModKey.FileName.String.StartsWith("Armor Distributor"))
            //    .WinningOverrides<IOutfitGetter>())
            //{
            //    Logger.InfoFormat("{0}:{1}", o.EditorID, OutfitUtils.GetArmorList(state.LinkCache, o).Count());
            //}


            //HelperUtils.MergePlugins(@"E:\Modded\SSE-Aldrnari142\mods\Armor Merged\merge - Armor Merged\merge.json", false);
            //return;
            Dictionary<string, HashSet<string>> keywords = new();
            foreach (var a in state.LoadOrder.PriorityOrder
                .WinningOverrides<IArmorGetter>()
                .Where(x=>ArmorUtils.IsValidArmor(x)))
            {
                keywords.GetOrAdd(ArmorUtils.GetMaterial(a)).Add(ArmorUtils.GetFullName(a) + "::" + a.FormKey);
            }
            FileUtils.WriteJson("Armors.json", keywords.OrderBy(x => x.Key));
            return;

            //List<string> esps = new();
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Deze Armor and Clothing SPIDified\SPIDeze_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\SPID Bikinification\Arial Dress Up Bikini Bandits Vanilla - SPID_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Distributed Divine Elegance with SPID featuring Fancy Erikur and Nazeem\Arial Distributed Divine Elegance - SPID_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Detailed NPCs - Dwemer Fairies for NPCs (SPID)\DwemerFairiestoNPCs_DISTRI.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Detailed NPCs - Equipped Spell Tomes for NPCs (SPID)\EquipSpellTomesNELRtoNPCs_DISTRI.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Detailed NPCs - Facial Piercings SSE for NPCs (SPID)\SPIDFacialPiercingsforNPCs_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Detailed NPCs - Kagrenac's Wisps for NPCs (SPID)\WispstoNPCMages_DISTRI.ini");
            //HelperUtils.UpdateSPIDFile(@"E:\Modded\SSE-Aldrnari142\mods\Armor Merged\merge - Armor Merged\map.json", esps, "Armor Merged.esp");
            //return;

            if (!RequirementsFullfilled(state)) return;

            var patchName = Settings.PatcherSettings.PatcherPrefix + "Patch 1.esp";
            var patch = FileUtils.GetOrAddPatch(patchName);
            patch = new OutfitManager(state).Process(patch);

            // Little house keeping 
            if (Settings.UserSettings.CreateBashPatch)
            {
                CreateBashPatchForLVLI(state, patch);
                CreateBashPatchForLVLN(state, patch);
            }

            //Saving all the patches to disk
            //Logger.InfoFormat("\nSaving all the patches to disk...");
            //Settings.Patches.ForEach(p => FileUtils.SaveMod(state, p));
            //Logger.InfoFormat("Patching completed, Enjoy your game...\n\n");
        }

        private static void CreateBashPatchForLVLI(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, ISkyrimMod patch)
        {
            Logger.InfoFormat("\nCreating Leveled List bash patch...");
            patch = FileUtils.GetIncrementedMod(patch);
            foreach (ILeveledItemGetter lvli in state.LoadOrder.PriorityOrder
                .WinningOverrides<ILeveledItemGetter>()
                .Where(x => !Program.Settings.UserSettings.ModsToSkip.Contains(x.FormKey.ModKey)))
            {
                List<ILeveledItemGetter> lvlis = state.LinkCache.ResolveAll<ILeveledItemGetter>(lvli.FormKey).ToList();
                if (lvlis.Count > 1)
                {
                    List<LeveledItemEntry> entries = new();
                    lvlis.ForEach(x => entries.AddRange(x.Entries.EmptyIfNull().Select(entry => entry.DeepCopy())));
                    LeveledItem lvl = patch.LeveledItems.GetOrAddAsOverride(lvlis.First());
                    lvl.Entries = new ExtendedList<LeveledItemEntry>();
                    OutfitUtils.AddEntriesToLeveledList(patch, lvl, entries);
                }
            }
        }

        private static void CreateBashPatchForLVLN(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, ISkyrimMod patch)
        {
            Logger.InfoFormat("Creating Leveled NPC bash patch...");
            patch = FileUtils.GetIncrementedMod(patch);
            foreach (ILeveledNpcGetter lvli in state.LoadOrder.PriorityOrder.WinningOverrides<ILeveledNpcGetter>()
                .Where(x => !Program.Settings.UserSettings.ModsToSkip.Contains(x.FormKey.ModKey)))
            {
                List<ILeveledNpcGetter> lvlis = Settings.Cache.ResolveAll<ILeveledNpcGetter>(lvli.FormKey).ToList();
                if (lvlis.Count > 1)
                {
                    List<LeveledNpcEntry> entries = new();
                    lvlis.ForEach(x => entries.AddRange(x.Entries.EmptyIfNull().Select(entry => entry.DeepCopy())));
                    LeveledNpc lvl = patch.LeveledNpcs.GetOrAddAsOverride(lvlis.First());
                    lvl.Entries = new();
                    OutfitUtils.AddEntriesToLeveledList(patch, lvl, entries);
                }
            }
        }

        private static bool RequirementsFullfilled(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Logger.InfoFormat("Validating requirements...");
            string spidLoc = Path.Combine(state.DataFolderPath, "skse", "plugins", "po3_SpellPerkItemDistributor.dll");
            if (!File.Exists(spidLoc))
            {
                Logger.ErrorFormat("Spell Perk Item Distributer mod is not found. Install it properly and re-run the patcher...");
                return false;
            }

            // Checking patched mods are enabled in load order
            bool patchExists = false;
            foreach (var modKey in state.LoadOrder.PriorityOrder
                .Select(x => x.ModKey))
            {
                if (modKey.FileName.String.StartsWith(Settings.PatcherSettings.PatcherPrefix))
                {
                    Logger.ErrorFormat("Disable or delete mod to continue: " + modKey.FileName);
                    patchExists = true;
                }
            }

            // Checking for JSOn File Categories
            var categories = Settings.PatcherSettings.OutfitRegex.Keys;
            Settings.UserSettings.ArmorMods.ForEach(s =>
            {
                s.Value.ForEach(x =>
                {
                    if (x != "Generic" && !categories.Contains(x))
                        Logger.WarnFormat("{0} contains invalid Category:{1}", s.Key, x);
                });
            });

            //// Copying the scripts
            //var src = Path.Combine(state.ExtraSettingsDataPath, "Scripts");
            //var des = Path.Combine(state.DataFolderPath, "Scripts");
            //FileUtils.CopyDirectory(src, des);

            Logger.InfoFormat("All the requirements are validated...");
            return !patchExists;
        }
    }
}
