using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Noggog;
using System.IO;
using ArmorDistributor.Utils;
using log4net.Config;
using log4net;
using System.Reflection;
using static ArmorDistributor.Config.Settings;
using ArmorDistributor.Managers;
using System;
using ArmorDistributor.NPC;
using Mutagen.Bethesda.Plugins;
using ArmorDistributor.Config;
using Mutagen.Bethesda.Environments;
using Mutagen.Bethesda.Plugins.Cache;

namespace ArmorDistributor
{
    class Program
    {
        private static readonly ILog Logger = LogManager.GetLogger(typeof(Program));
        static Lazy<UserSettings> LazyUserSettings = null!;
        internal static IGameEnvironmentState<ISkyrimMod, ISkyrimModGetter> PatcherEnv = GameEnvironment.Typical.Skyrim(
                SkyrimRelease.SkyrimSE, LinkCachePreferences.Default);

        public static async Task<int> Main(string[] args)
        {
            // Init logger
            var logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());
            XmlConfigurator.Configure(logRepository, new FileInfo("log4net.config"));

            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings(nickname: "UserSettings",
                    path: "UserSettings.json", out LazyUserSettings, true)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Armor Distributor-Bashed Patch.esp")
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPacher)
                .Run(args);
        }

        private static void RunPacher(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            PatcherEnv.Dispose();
            //HelperUtils.mergePlugins(@"E:\Modded\SSE-Aldrnari142\mods\Armor Merged\merge - Armor Merged\merge.json", false);
            ////return;

            //List<string> esps = new();
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Deze Armor and Clothing SPIDified\SPIDeze_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\SPID Bikinification\Arial Dress Up Bikini Bandits Vanilla - SPID_DISTR.ini");
            //esps.Add(@"E:\Modded\SSE-Aldrnari142\mods\Distributed Divine Elegance with SPID featuring Fancy Erikur and Nazeem\Arial Distributed Divine Elegance - SPID_DISTR.ini");
            //HelperUtils.updateSPIDFile(@"E:\Modded\SSE-Aldrnari142\mods\Armor Merged\merge - Armor Merged\map.json", esps, "Armor Merged.esp");
            //return;

            // Reading and Parsing setting file
            Console.WriteLine("Settings loaded");
            Init(state, LazyUserSettings.Value);

            if (!RequirementsFullfilled(state)) return;
            
            //Distribute Jewellaries and Sleeping outfits, and outfits
            //JewelaryManager.ProcessAndDistributeJewelary(state);
            //new SleepingOutfitManager(state).ProcessSlepingOutfits();
            new OutfitManager(state).Process();

            // Little house keeping 
            if (Settings.UserSettings.CreateBashPatch)
            {
                CreateBashPatchForLVLI(state);
                CreateBashPatchForLVLN(state);
            }

            //Saving all the patches to disk
            Logger.InfoFormat("Saving all the patches to disk...");
            Patches.Add(state.PatchMod);
            Patches.ForEach(p => FileUtils.SaveMod(state, p));
            Logger.InfoFormat("Enjoy");
        }

        private static void CreateBashPatchForLVLI(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Logger.InfoFormat("Creating Leveled List bash patch...");
            foreach (ILeveledItemGetter lvli in Settings.State.LoadOrder.PriorityOrder
                .WinningOverrides<ILeveledItemGetter>())
            {
                List<ILeveledItemGetter> lvlis = Settings.State.LinkCache.ResolveAll<ILeveledItemGetter>(lvli.FormKey).ToList();
                if (lvlis.Count > 1)
                {
                    List<LeveledItemEntry> entries = new();
                    lvlis.ForEach(x => entries.AddRange(x.Entries.EmptyIfNull().Select(entry => entry.DeepCopy())));
                    LeveledItem lvl = state.PatchMod.LeveledItems.GetOrAddAsOverride(lvlis.First());
                    lvl.Entries = new ExtendedList<LeveledItemEntry>();
                    OutfitUtils.AddEntriesToLeveledList(state.PatchMod, lvl, entries.Distinct());
                }
            }
        }

        private static void FixCircularLeveledLists(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Logger.InfoFormat("Creating Leveled List bash patch...");
            var mCache = state.LoadOrder.ToMutableLinkCache();
            Dictionary<FormKey, List<FormKey>> parentChildLL = new();
            List<FormKey> processed = new();
            foreach (ILeveledItemGetter lvli in state.LoadOrder.PriorityOrder
            .WinningOverrides<ILeveledItemGetter>())
            {
                HashSet<FormKey> set = new();
                if (!processed.Contains(lvli.FormKey)) {
                    Logger.InfoFormat("Checking Circuler Leveled List: "+lvli.FormKey.ToString());
                    OutfitUtils.FixLeveledList(lvli, set, parentChildLL, mCache);
                }
                processed.AddRange(set);
            }

            var patch = state.PatchMod;
            //var patch = FileUtils.GetOrAddPatch(Settings.PatcherSettings.PatcherPrefix + "Bash Patch Part 1.esp");
            foreach (var llset in parentChildLL) {
                var ll = patch.LeveledItems.GetOrAddAsOverride(mCache.Resolve<ILeveledItem>(llset.Key));
                ll.Entries = ll.Entries.Where(i => !llset.Value.Contains( i.Data.Reference.FormKey))
                    .Select(i => i.DeepCopy())
                    .ToExtendedList();
            }
        }

        private static void CreateBashPatchForLVLN(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Logger.InfoFormat("Creating Leveled NPC bash patch...");
            foreach (ILeveledNpcGetter lvli in State.LoadOrder.PriorityOrder.WinningOverrides<ILeveledNpcGetter>()){
                List<ILeveledNpcGetter> lvlis = Cache.ResolveAll<ILeveledNpcGetter>(lvli.FormKey).ToList();
                if (lvlis.Count > 1)
                {
                    List<LeveledNpcEntry> entries = new();
                    lvlis.ForEach(x => entries.AddRange(x.Entries.EmptyIfNull().Select(entry => entry.DeepCopy())));
                    LeveledNpc lvl = state.PatchMod.LeveledNpcs.GetOrAddAsOverride(lvlis.First());
                    lvl.Entries = new ();
                    OutfitUtils.AddEntriesToLeveledList(state.PatchMod, lvl, entries.Distinct());
                }
            }
        }

        private static bool RequirementsFullfilled(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            
            Logger.InfoFormat("Validating requirements...");
            string spidLoc = Path.Combine(state.DataFolderPath, "skse", "plugins", "po3_SpellPerkItemDistributor.dll");
            if (!File.Exists(spidLoc))
            {
                Logger.ErrorFormat("Spell Perk Item Distributer mod is not found. Install it properly and re-run the patcher...");
                return false;
            }

            // Checking patched mods are enabled in load order
            bool patchExists = false;
            foreach (var modKey in state.LoadOrder.PriorityOrder
                .Where(x => x.ModKey != state.PatchMod.ModKey)
                .Select(x => x.ModKey))
            {
                if (modKey.FileName.String.StartsWith(Settings.PatcherSettings.PatcherPrefix))
                {
                    Logger.ErrorFormat("Disable or delete mod to continue: " + modKey.FileName);
                    patchExists = true;
                }
            }

            // Checking for JSOn File Categories
            var categories = Settings.PatcherSettings.OutfitRegex.Keys;
            Settings.UserSettings.ArmorMods.ForEach(s => {
                s.Value.ForEach(x => {
                    if (x!="Generic" && !categories.Contains(x))
                        Logger.WarnFormat("{0} contains invalid Category:{1}", s.Key, x);
                });
            });

            //// Copying the scripts
            //var src = Path.Combine(state.ExtraSettingsDataPath, "Scripts");
            //var des = Path.Combine(state.DataFolderPath, "Scripts");
            //FileUtils.CopyDirectory(src, des);

            Logger.InfoFormat("All the requirements are validated...");
            return !patchExists;
        }
        
        private static void PatchHighPolyHead(IPatcherState<ISkyrimMod, ISkyrimModGetter> state) {
            foreach (var npc in state.LoadOrder.PriorityOrder
                .WinningOverrides<INpcGetter>())
            {
                var contxt = Cache.ResolveAllContexts<INpc, INpcGetter>(npc.FormKey);
                string esps = "High Poly NPC";
                ISkyrimMod patchedMod = FileUtils.GetOrAddPatch(Settings.PatcherSettings.PatcherPrefix + "High Poly NPC.esp");

                var first = contxt.First();
                var mods = contxt.Where(x => x.ModKey.FileName.String.Contains(esps));
                if (mods.Any() && mods.First().ModKey != first.ModKey) {
                    var winner = contxt.First().Record;
                    var looser = mods.First().Record;
                    var newNPC = patchedMod.Npcs.GetOrAddAsOverride(winner);
                    newNPC.HeadParts.Clear();
                    newNPC.HeadParts.AddRange(looser.HeadParts);
                    Logger.InfoFormat("Patched Brown Head for: " + newNPC.EditorID);
                }
            }
        } 
    }
}
