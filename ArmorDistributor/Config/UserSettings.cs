using Noggog;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Synthesis.Settings;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using System.Collections.Generic;
using System.Linq;
using log4net;

namespace ArmorDistributor.Config
{
    public class UserSettings
    {
        [Ignore]
        private static readonly ILog Logger = LogManager.GetLogger(typeof(UserSettings));

        [MaintainOrder]
        [JsonDiskName("PatcherPrefix")]
        [SettingName("Patcher Plugins Prefix: ")]
        [SynthesisTooltip("Prefix for the plugins generated by the patcher")]
        public string PatcherPrefix = string.Empty;

        [MaintainOrder]
        [JsonDiskName("DefaultOutfitPercentage")]
        [SettingName("Distribute Default Outfits By: ")]
        [SynthesisTooltip("Along with moded outfits, distribute default outfits as well by mentioned percentage.")]
        public int DefaultOutfitPercentage = 10;

        [MaintainOrder]
        [JsonDiskName("FilterUniqueNPC")]
        [SettingName("Filter Unique NPC: ")]
        [SynthesisTooltip("Outfits will not be assigned to unique NPCs when seleted")]
        public bool FilterUniqueNPC = false;

        [MaintainOrder]
        [JsonDiskName("RaceBasedDistribution")]
        [SettingName("Race Based Distribution: ")]
        [SynthesisTooltip("Distribute armors based on the NPC races")]
        public bool RaceBasedDistribution = true;

        [MaintainOrder]
        [JsonDiskName("ClassBasedDistribution")]
        [SettingName("Class Based Distribution: ")]
        [SynthesisTooltip("Distribute armors based on the NPC classes")]
        public bool ClassBasedDistribution = true;

        [MaintainOrder]
        [JsonDiskName("FactionBasedDistribution")]
        [SettingName("Faction Based Distribution: ")]
        [SynthesisTooltip("Distribute armors based on the NPC factions")]
        public bool FactionBasedDistribution = true;

        [MaintainOrder]
        [JsonDiskName("SkipGuardDistribution")]
        [SettingName("Skip Guard Distribution: ")]
        [SynthesisTooltip("Distribute armors to the gurads")]
        public bool SkipGuardDistribution = true;

        [MaintainOrder]
        [JsonDiskName("SkipSluttyOutfit")]
        [SettingName("Skip Slutty Outfits: ")]
        [SynthesisTooltip("When selected, Patcher will try to skip slutty armors")]
        public bool SkipSluttyOutfit = true;

        [MaintainOrder]
        [JsonDiskName("CreateBashPatch")]
        [SettingName("Bash Patch For Leveled Lists: ")]
        [SynthesisTooltip("Outfits will not be assigned to unique NPCs when seleted")]
        public bool CreateBashPatch = true;

        [MaintainOrder]
        [JsonDiskName("NPCToSkip")]
        [SettingName("Skip NPCs: ")]
        [SynthesisTooltip("These npcs will be skipped")]
        public HashSet<FormKey> NPCToSkip = new();

        [MaintainOrder]
        [JsonDiskName("ModsToSkip")]
        [SettingName("Skip Mods: ")]
        [SynthesisTooltip("Select the mods which you dont want to use in patcher")]
        public HashSet<ModKey> ModsToSkip = new();

        [MaintainOrder]
        [JsonDiskName("OutfitMods")]
        [SettingName("NPC mods for patching outfits: ")]
        [SynthesisTooltip("By default it will add all the mods with NPC records to patch their outfits. \nYou can add/remove the mod to include/exclude the NPC accordingly.")]
        public List<ModKey> OutfitMods { get; set; } = new();

        [MaintainOrder]
        [SettingName("Armor Mods: ")]
        [SynthesisTooltip("Select the armor mods and the outfit catergory.\nIf category is not selected the mod will use Generic Category.\nFor Generic category, outfit will be created based on the armor material type.\n\n" +
            "Patcher will try to select some armor mods and assign those categories. \nYou should check this list and make sure everything is correct")]
        public List<ModCategory> PatchableArmorMods = new();

        [MaintainOrder]
        [SettingName("Categories To Skip: ")]
        [JsonDiskName("CategoriesToSkip")]
        [SynthesisTooltip("Patcher will not assign the outfits to the selected categories")]
        public List<Categories> CategoriesToSkip { get; set; } = new();

        [Ignore]
        [JsonDiskName("ArmorMods")]
        public Dictionary<string, List<string>>? ArmorMods=new();

        public UserSettings()
        {
            if (Settings.DefaultUserSettings != null) {
                var order = Program.PatcherEnv.LoadOrder;
                PatcherPrefix = Settings.PatcherSettings.PatcherPrefix;
                
                // Mods to Skip
                if (ModsToSkip == null || !ModsToSkip.Any()) {
                    ModsToSkip = Settings.DefaultUserSettings.ModsToSkip
                        .Where(x=>order.ContainsKey(x)).ToHashSet();
                }

                // Outfit mods
                if (OutfitMods == null || !OutfitMods.Any())
                {
                    Logger.DebugFormat("Loading NPCs mods for outfits... ");
                    OutfitMods = order.PriorityOrder
                    .Where(x => !ModsToSkip.Contains(x.ModKey) && x.Mod.Npcs.Any())
                    .Select(x => x.ModKey)
                    .ToList();
                }
                if (OutfitMods == null || !OutfitMods.Any())
                    OutfitMods = order.Select(x => x.Key).ToList();

                    // Armor Mods
                    if (PatchableArmorMods == null || !PatchableArmorMods.Any())
                    PatchableArmorMods = Settings.DefaultUserSettings.PatchableArmorMods
                        .Where(a=> Program.PatcherEnv.LoadOrder[a.ArmorMod].Mod.Armors.Any())
                        .ToList();

                PatchableArmorMods.ForEach(mc =>
                {
                    ArmorMods.GetOrAdd(mc.ArmorMod.FileName).AddRange(mc.Categories.Select(x => x.ToString()));
                });

                // Armor Categories to skip
                if (CategoriesToSkip == null || !CategoriesToSkip.Any()) {
                    CategoriesToSkip = Settings.DefaultUserSettings.CategoriesToSkip;
                }
            }
        }
    }
}
